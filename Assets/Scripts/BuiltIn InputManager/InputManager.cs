//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/BuiltIn InputManager/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""08152469-cd84-4af7-acde-22c6722fed67"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""09405a2e-96cd-4529-9bcf-f169c4a4150e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Recall"",
                    ""type"": ""Button"",
                    ""id"": ""ce4d498a-cab6-4301-a513-7a6b21a16f46"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scout"",
                    ""type"": ""Button"",
                    ""id"": ""f185db4e-e473-4108-b41b-a74d65dbf47f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0f13a60c-7c58-4350-b97d-b0c06686d3c4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""57d83851-664f-4e79-9a8b-fe4c4e09e446"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""83bb256a-daf5-4da3-ba67-635bbe8038ba"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5cdc7f8f-5cfd-4832-8169-33255afa207d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""be35b175-85e9-4db8-9f7f-6fab7e781553"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cec3bf8f-654d-4ce5-b411-fa7a375b98c9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Recall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""178678e2-e6fa-421c-9daf-1f295fa83a5b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scout"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Companion"",
            ""id"": ""c39e85f1-b7c4-445e-8cb4-d2fed8b60d14"",
            ""actions"": [
                {
                    ""name"": ""Recall"",
                    ""type"": ""Button"",
                    ""id"": ""1c23ee60-5a8c-40f7-8c04-f91fcf36fdbe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c76f0611-3558-405e-89bd-c54c43638898"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Recall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Recall = m_Player.FindAction("Recall", throwIfNotFound: true);
        m_Player_Scout = m_Player.FindAction("Scout", throwIfNotFound: true);
        // Companion
        m_Companion = asset.FindActionMap("Companion", throwIfNotFound: true);
        m_Companion_Recall = m_Companion.FindAction("Recall", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Recall;
    private readonly InputAction m_Player_Scout;
    public struct PlayerActions
    {
        private @InputManager m_Wrapper;
        public PlayerActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Recall => m_Wrapper.m_Player_Recall;
        public InputAction @Scout => m_Wrapper.m_Player_Scout;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Recall.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRecall;
                @Recall.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRecall;
                @Recall.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRecall;
                @Scout.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScout;
                @Scout.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScout;
                @Scout.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScout;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Recall.started += instance.OnRecall;
                @Recall.performed += instance.OnRecall;
                @Recall.canceled += instance.OnRecall;
                @Scout.started += instance.OnScout;
                @Scout.performed += instance.OnScout;
                @Scout.canceled += instance.OnScout;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Companion
    private readonly InputActionMap m_Companion;
    private ICompanionActions m_CompanionActionsCallbackInterface;
    private readonly InputAction m_Companion_Recall;
    public struct CompanionActions
    {
        private @InputManager m_Wrapper;
        public CompanionActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Recall => m_Wrapper.m_Companion_Recall;
        public InputActionMap Get() { return m_Wrapper.m_Companion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CompanionActions set) { return set.Get(); }
        public void SetCallbacks(ICompanionActions instance)
        {
            if (m_Wrapper.m_CompanionActionsCallbackInterface != null)
            {
                @Recall.started -= m_Wrapper.m_CompanionActionsCallbackInterface.OnRecall;
                @Recall.performed -= m_Wrapper.m_CompanionActionsCallbackInterface.OnRecall;
                @Recall.canceled -= m_Wrapper.m_CompanionActionsCallbackInterface.OnRecall;
            }
            m_Wrapper.m_CompanionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Recall.started += instance.OnRecall;
                @Recall.performed += instance.OnRecall;
                @Recall.canceled += instance.OnRecall;
            }
        }
    }
    public CompanionActions @Companion => new CompanionActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRecall(InputAction.CallbackContext context);
        void OnScout(InputAction.CallbackContext context);
    }
    public interface ICompanionActions
    {
        void OnRecall(InputAction.CallbackContext context);
    }
}
